{
	// Place your Arduino workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"struct":{
		"prefix": "sdStruct",
		"body": [
			"class ${1:TclassName} : public TmenuHandle{"
				,"\t${2:Ttimer timer;}"
				,"\tpublic:"
				,"\t\tsdds_struct("
				,	"\t\t\t${3}"
				,"\t\t)"
				,"\t\tpublic:"
				,"\t\t\t${1:TclassName}(){"
				,"\t\t\t\t${4}"
				,"\t\t\t}"

			"};",
		],
		"description": "struct template with constructor"
	},
	"var":{
		"prefix": "sdVar",
		"body": [
			"sdds_var(${1|Tuint8,Tuint16,Tuint32,Tint8,Tint16,Tint32,Tfloat32,Ttime,Tstring|},${2:varName})${3}"
		],
		"description": "struct template with constructor"
	},
	"on":{
		"prefix": "sdOn",
		"body": [
			"on(${1:varName}){"
				,"\t${2}"
			,"};"
		],
		"description": "create an event handler (on)"
	},
	"enum":{
		"prefix": "sdEnum",
		"body": [
			"sdds_enum(${1:en1,en2,...}) ${2:enumName};"
		],
		"description": "create an enum"
	}

 
}